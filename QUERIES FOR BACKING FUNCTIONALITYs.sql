-- Outstanding debts
WITH USER_GAME_HISTORY AS (
  SELECT GS_ID,
		 AMOUNT_OUT-AMOUNT_IN AS CHANGE
  FROM   GAME
  WHERE  USER_ID = :userId),
BACKING_PAYMENTS AS (
    SELECT B.GS_ID AS GS_ID, 
    BA.ID AS BA_ID,
    BA.BACKER_ID,
    (CASE 
      WHEN BA.OVERRIDE_AMOUNT != NULL THEN BA.OVERRIDE_AMOUNT
      WHEN G.CHANGE > 0 THEN (G.CHANGE * BA.PERCENT_OF_WIN/100) + BA.FLAT_FEE
      ELSE (G.CHANGE * BA.PERCENT_OF_LOSS/100 * -1) + BA.FLAT_FEE
     END) AS OWED, 
    SUM(NVL(PP.AMOUNT,0)) AS PAYED 
    FROM BACKING B, USER_GAME_HISTORY G, BACKING_AGREEMENT BA, PAYMENT_PART PP
    WHERE B.ID = BA.ID
    AND PP.ID (+) = B.ID
    AND PP.GS_ID (+) = B.GS_ID
    GROUP BY B.GS_ID, B.ID, BA.ID, BA.BACKER_ID,
      (CASE 
      WHEN BA.OVERRIDE_AMOUNT != NULL THEN BA.OVERRIDE_AMOUNT
      WHEN G.CHANGE > 0 THEN (G.CHANGE * BA.PERCENT_OF_WIN/100) + BA.FLAT_FEE
      ELSE (G.CHANGE * BA.PERCENT_OF_LOSS/100 * -1) + BA.FLAT_FEE
      END)
)
SELECT U.USERNAME, SUM(BP.OWED-BP.PAYED) AS OWED
FROM BACKING_PAYMENTS BP, USERS U
WHERE U.USER_ID = BP.BACKER_ID
GROUP BY U.USERNAME;


-- Outstanding backing agreements between a user and a backer
WITH USER_GAME_HISTORY AS (
  SELECT GS_ID,
     START_DATE,
		 AMOUNT_OUT-AMOUNT_IN AS CHANGE
  FROM   GAME
  WHERE  USER_ID = :userId),
BACKING_PAYMENTS AS (
    SELECT B.GS_ID AS GS_ID, 
    BA.ID AS BA_ID,
    G.START_DATE,
    (CASE 
      WHEN BA.OVERRIDE_AMOUNT != NULL THEN BA.OVERRIDE_AMOUNT
      WHEN G.CHANGE > 0 THEN (G.CHANGE * BA.PERCENT_OF_WIN/100) + BA.FLAT_FEE
      ELSE (G.CHANGE * BA.PERCENT_OF_LOSS/100 * -1) + BA.FLAT_FEE
     END) AS OWED, 
    SUM(NVL(PP.AMOUNT,0)) AS PAYED 
    FROM BACKING B, USER_GAME_HISTORY G, BACKING_AGREEMENT BA, PAYMENT_PART PP
    WHERE B.ID = BA.ID
    AND BA.BACKER_ID = :backerId
    AND PP.ID (+) = B.ID
    AND PP.GS_ID (+) = B.GS_ID
    GROUP BY B.GS_ID, B.ID, BA.ID, G.START_DATE,
      (CASE 
      WHEN BA.OVERRIDE_AMOUNT != NULL THEN BA.OVERRIDE_AMOUNT
      WHEN G.CHANGE > 0 THEN (G.CHANGE * BA.PERCENT_OF_WIN/100) + BA.FLAT_FEE
      ELSE (G.CHANGE * BA.PERCENT_OF_LOSS/100 * -1) + BA.FLAT_FEE
      END)
)
SELECT BP.GS_ID, BP.BA_ID, BP.START_DATE, BP.OWED - BP.PAYED as OUTSTANDING
FROM BACKING_PAYMENTS BP
WHERE BP.OWED > BP.PAYED
ORDER BY BP.START_DATE ASC