DROP VIEW V_DEBT_STATUS;
DROP TABLE PAYMENT;
DROP TABLE BACKING;
DROP TABLE BACKING_AGREEMENT;
DROP TABLE GAME_CASH;
DROP TABLE GAME_TOURNAMENT;
DROP TABLE GAME;
DROP TABLE LOCATION;
DROP TABLE HORSE_BACKERS;
DROP TABLE USERS;

DROP SEQUENCE GAME_SEQUENCE;
DROP SEQUENCE USERS_SEQUENCE;
DROP SEQUENCE BACKING_AGREEMENT_SEQUENCE;
DROP SEQUENCE PAYMENT_SEQUENCE;

CREATE TABLE USERS 
(
  USER_ID NUMBER(10) NOT NULL
, USERNAME VARCHAR2(24 CHAR) NOT NULL
, PASSWORD VARCHAR2(32) NOT NULL 
, EMAIL VARCHAR2(50 CHAR) NOT NULL
, CONSTRAINT USERS_PK PRIMARY KEY ( USER_ID ) ENABLE 
, CONSTRAINT USERS_UK_USERNAME UNIQUE ( USERNAME ) ENABLE
, CONSTRAINT USERS_UK_EMAIL UNIQUE ( EMAIL ) ENABLE
, CONSTRAINT USERNAMELENGTH CHECK(LENGTH(USERNAME) > 2) ENABLE
, CONSTRAINT EMAILREGEX CHECK(REGEXP_LIKE(EMAIL,'\w+@\w+(\.\w+)+')) ENABLE
);


CREATE TABLE LOCATION
(
  USER_ID NUMBER(20) NOT NULL
, NAME VARCHAR2(50 CHAR) NOT NULL 
, FAVOURITE SMALLINT 
, CONSTRAINT LOCATIONA_PK PRIMARY KEY ( USER_ID  , NAME  ) ENABLE 
, CONSTRAINT LOCATION_USERS_FK1 
	FOREIGN KEY ( USER_ID ) 
	REFERENCES USERS ( USER_ID )
	ON DELETE CASCADE ENABLE
);


CREATE TABLE GAME
(
  GS_ID NUMBER(20) NOT NULL
, USER_ID NUMBER(10) 
, START_DATE DATE
, END_DATE DATE
, AMOUNT_IN NUMBER(9,2) NOT NULL
, AMOUNT_OUT NUMBER(9,2) NOT NULL
, LOCATION_NAME VARCHAR2(50)
, CONSTRAINT GAME_PK PRIMARY KEY ( GS_ID ) ENABLE 
, CONSTRAINT GAME_USERS_FK1 
	FOREIGN KEY ( USER_ID ) 
	REFERENCES USERS ( USER_ID )
	ENABLE
, CONSTRAINT LOCATION_GAME_FK1
	FOREIGN KEY ( USER_ID , LOCATION_NAME ) 
	REFERENCES LOCATION ( USER_ID , NAME )
	ON DELETE SET NULL ENABLE
, CONSTRAINT GAME_TIME CHECK(START_DATE <= END_DATE) ENABLE
, CONSTRAINT GAME_AI CHECK(0 <= AMOUNT_IN) ENABLE
, CONSTRAINT GAME_AO CHECK(0 <= AMOUNT_OUT) ENABLE
);


CREATE TABLE GAME_CASH 
(
  GS_ID NUMBER(20) NOT NULL 
, BIG_BLIND NUMBER(6, 2) 
, SMALL_BLIND NUMBER(6, 2) 
, CONSTRAINT GAME_CASH_PK PRIMARY KEY ( GS_ID ) ENABLE 
, CONSTRAINT GAME_CASH_GAME_FK1 
	FOREIGN KEY ( GS_ID ) 
	REFERENCES GAME ( GS_ID )
	ON DELETE CASCADE ENABLE
, CONSTRAINT GAME_BB CHECK(0 <= BIG_BLIND) ENABLE
, CONSTRAINT GAME_SB CHECK(0 <= SMALL_BLIND) ENABLE
);


CREATE TABLE GAME_TOURNAMENT
(
  GS_ID NUMBER(20) NOT NULL 
, PLACED_FINISHED NUMBER(5,0)
, CONSTRAINT GAME_TOURN_PK PRIMARY KEY ( GS_ID ) ENABLE 
, CONSTRAINT GAME_TOURN_GAME_FK1 
	FOREIGN KEY ( GS_ID ) 
	REFERENCES GAME ( GS_ID )
	ON DELETE CASCADE ENABLE
, CONSTRAINT GAME_PF CHECK(0 <= PLACED_FINISHED) ENABLE
);


CREATE TABLE BACKING_AGREEMENT 
(
  BA_ID NUMBER(20) NOT NULL 
, HORSE_ID NUMBER(20) NOT NULL 
, BACKER_ID NUMBER(20) NOT NULL 
, FLAT_FEE NUMBER(8, 2) DEFAULT 0 
, PERCENT_OF_WIN NUMBER(5, 2) DEFAULT 0
, PERCENT_OF_LOSS NUMBER(5, 2) DEFAULT 0
, OVERRIDE_AMOUNT NUMBER(8, 2) 
, CONSTRAINT BACKING_AGREEMENT_PK PRIMARY KEY ( BA_ID ) ENABLE 
, CONSTRAINT BACKING_AGREEMENT_U UNIQUE ( HORSE_ID , BACKER_ID , FLAT_FEE , PERCENT_OF_WIN , PERCENT_OF_LOSS , OVERRIDE_AMOUNT ) ENABLE
, CONSTRAINT BACKING_AGREEMENT_FK1 
	FOREIGN KEY ( HORSE_ID ) 
	REFERENCES USERS ( USER_ID )
	ON DELETE CASCADE ENABLE
, CONSTRAINT BACKING_AGREEMENT_FK2 
	FOREIGN KEY ( BACKER_ID ) 
	REFERENCES USERS ( USER_ID )
	ON DELETE CASCADE ENABLE
, CONSTRAINT BACKING_AGREE_DIFF CHECK(HORSE_ID != BACKER_ID) ENABLE
, CONSTRAINT BACKING_AGREE_FEE CHECK(FLAT_FEE >= 0) ENABLE
, CONSTRAINT BACKING_AGREE_POW CHECK(PERCENT_OF_WIN >= 0 AND PERCENT_OF_WIN <= 100) ENABLE
, CONSTRAINT BACKING_AGREE_POL CHECK(PERCENT_OF_LOSS >= 0 AND PERCENT_OF_LOSS <= 100) ENABLE
);


CREATE TABLE HORSE_BACKERS 
(
  HORSE NUMBER(20) NOT NULL 
, BACKER NUMBER(20) NOT NULL 
, CONSTRAINT HORSE_BACKERS_PK PRIMARY KEY ( HORSE , BACKER ) ENABLE 
, CONSTRAINT HORSE_BACKERS_FK1 
	FOREIGN KEY ( HORSE ) 
	REFERENCES USERS ( USER_ID )
	ON DELETE CASCADE ENABLE
, CONSTRAINT HORSE_BACKERS_FK2 
	FOREIGN KEY ( BACKER ) 
	REFERENCES USERS ( USER_ID )
	ON DELETE CASCADE ENABLE
, CONSTRAINT HORSE_BACKERS_DIFF CHECK(HORSE != BACKER) ENABLE
);


CREATE TABLE BACKING 
(
  BA_ID NUMBER(20) NOT NULL 
, GS_ID NUMBER(20) NOT NULL
, CONSTRAINT BACKING_PK PRIMARY KEY ( BA_ID , GS_ID ) ENABLE 
, CONSTRAINT BACKING_BACKING_AGREE_FK1 
	FOREIGN KEY ( BA_ID ) 
	REFERENCES BACKING_AGREEMENT ( BA_ID )
	ON DELETE CASCADE ENABLE
, CONSTRAINT BACKING_GAME_FK1
	FOREIGN KEY ( GS_ID ) 
	REFERENCES GAME ( GS_ID )
	ON DELETE CASCADE ENABLE
);


CREATE TABLE PAYMENT
(
  PP_ID NUMBER(20) NOT NULL
, PAYER_ID NUMBER(20) NOT NULL
, PAYEE_ID NUMBER(20) NOT NULL 
, PAYMENT_DATE DATE NOT NULL
, AMOUNT NUMBER(8, 2) NOT NULL 
, CONSTRAINT PAYMENT_PK PRIMARY KEY ( PP_ID  ) ENABLE 
, CONSTRAINT PAYMENT_FK1 
	FOREIGN KEY ( PAYER_ID ) 
	REFERENCES USERS ( USER_ID )
	ENABLE
, CONSTRAINT PAYMENT_FK2
	FOREIGN KEY ( PAYEE_ID ) 
	REFERENCES USERS ( USER_ID )
	ENABLE
, CONSTRAINT PAYMENT_DIFFERENT_USER CHECK(PAYER_ID != PAYEE_ID) ENABLE
, CONSTRAINT PAYMENT_AMOUNT_VALID CHECK(AMOUNT > 0) ENABLE
);


CREATE SEQUENCE USERS_SEQUENCE INCREMENT BY 1 START WITH 100 MAXVALUE 20000 MINVALUE 0 NOCACHE;
CREATE SEQUENCE GAME_SEQUENCE INCREMENT BY 1 START WITH 100 MAXVALUE 20000 MINVALUE 0 NOCACHE;
CREATE SEQUENCE BACKING_AGREEMENT_SEQUENCE INCREMENT BY 1 START WITH 100 MAXVALUE 20000 MINVALUE 0 NOCACHE;
CREATE SEQUENCE PAYMENT_SEQUENCE INCREMENT BY 1 START WITH 100 MAXVALUE 20000 MINVALUE 0 NOCACHE;


CREATE VIEW V_DEBT_STATUS AS 
	WITH USER_PAYMENTS AS (
      SELECT PAYER_ID, PAYEE_ID, SUM(AMOUNT) AS PAYED
      FROM PAYMENT
      GROUP BY PAYER_ID, PAYEE_ID
    ),
    BACKING_OWES AS (
        SELECT BA.HORSE_ID,
          BA.BACKER_ID,
        SUM(CASE 
          WHEN BA.OVERRIDE_AMOUNT IS NOT NULL THEN BA.OVERRIDE_AMOUNT
          WHEN (G.AMOUNT_OUT-G.AMOUNT_IN) > 0 THEN ((G.AMOUNT_OUT-G.AMOUNT_IN) * BA.PERCENT_OF_WIN/100) + BA.FLAT_FEE
          ELSE ((G.AMOUNT_OUT-G.AMOUNT_IN) * BA.PERCENT_OF_LOSS/100 * -1) + BA.FLAT_FEE
        END) AS OWED
        FROM BACKING B, GAME G, BACKING_AGREEMENT BA
        WHERE B.BA_ID = BA.BA_ID
        AND G.GS_ID = B.GS_ID
        GROUP BY BA.HORSE_ID,
          BA.BACKER_ID
    )
    SELECT NVL(BO.HORSE_ID, UP.PAYER_ID) AS HORSE_ID, 
     NVL(BO.BACKER_ID, UP.PAYEE_ID) AS BACKER_ID,
     NVL(BO.OWED,0) AS OWED, 
     NVL(UP.PAYED,0) AS PAYED
    FROM BACKING_OWES BO
    FULL OUTER JOIN USER_PAYMENTS UP
    ON BO.HORSE_ID = UP.PAYER_ID 
    AND BO.BACKER_ID = UP.PAYEE_ID;
      


Insert into USERS (USER_ID,USERNAME,PASSWORD,EMAIL) values (10,'AAA','465459a5ad63c67d973a677796095f38','AAAAAA@asd.asdf');
Insert into USERS (USER_ID,USERNAME,PASSWORD,EMAIL) values (11,'BBB','4a88a17d503327fe762b4398d7d3eefa','BBB@BBB.BBB');
Insert into USERS (USER_ID,USERNAME,PASSWORD,EMAIL) values (12,'CCC','a174e87ecef3f48d5f06f7c2555e914b','CCC@CCC.com');
Insert into USERS (USER_ID,USERNAME,PASSWORD,EMAIL) values (13,'DDD','f8ccb4a0d950dfe907d268860ade9697','DDD@DDD.COM');
Insert into USERS (USER_ID,USERNAME,PASSWORD,EMAIL) values (14,'EEE','f2a5cd0042c81612e8ef21474c35f371','EEE@EEE.com');
Insert into USERS (USER_ID,USERNAME,PASSWORD,EMAIL) values (15,'FFF','a361d81916e0964b14a34d6208183c14','fff@fff.c');


Insert into HORSE_BACKERS (HORSE,BACKER) values (10,11);
Insert into HORSE_BACKERS (HORSE,BACKER) values (10,12);
Insert into HORSE_BACKERS (HORSE,BACKER) values (10,13);
Insert into HORSE_BACKERS (HORSE,BACKER) values (11,10);
Insert into HORSE_BACKERS (HORSE,BACKER) values (14,11);
Insert into HORSE_BACKERS (HORSE,BACKER) values (15,11);
Insert into HORSE_BACKERS (HORSE,BACKER) values (15,12);
Insert into HORSE_BACKERS (HORSE,BACKER) values (15,13);
Insert into HORSE_BACKERS (HORSE,BACKER) values (15,14);


Insert into BACKING_AGREEMENT (BA_ID,HORSE_ID,BACKER_ID,FLAT_FEE,PERCENT_OF_WIN,PERCENT_OF_LOSS,OVERRIDE_AMOUNT) values (14,10,11,0,0,0,1);
Insert into BACKING_AGREEMENT (BA_ID,HORSE_ID,BACKER_ID,FLAT_FEE,PERCENT_OF_WIN,PERCENT_OF_LOSS,OVERRIDE_AMOUNT) values (12,10,11,0,0,0,3);
Insert into BACKING_AGREEMENT (BA_ID,HORSE_ID,BACKER_ID,FLAT_FEE,PERCENT_OF_WIN,PERCENT_OF_LOSS,OVERRIDE_AMOUNT) values (13,10,11,0,0,0,4);
Insert into BACKING_AGREEMENT (BA_ID,HORSE_ID,BACKER_ID,FLAT_FEE,PERCENT_OF_WIN,PERCENT_OF_LOSS,OVERRIDE_AMOUNT) values (10,10,11,0,0,0,100);
Insert into BACKING_AGREEMENT (BA_ID,HORSE_ID,BACKER_ID,FLAT_FEE,PERCENT_OF_WIN,PERCENT_OF_LOSS,OVERRIDE_AMOUNT) values (11,10,12,0,10,0,null);
Insert into BACKING_AGREEMENT (BA_ID,HORSE_ID,BACKER_ID,FLAT_FEE,PERCENT_OF_WIN,PERCENT_OF_LOSS,OVERRIDE_AMOUNT) values (15,11,10,0,0,0,1000);


Insert into LOCATION (USER_ID,NAME,FAVOURITE) values (10,'Home',0);
Insert into LOCATION (USER_ID,NAME,FAVOURITE) values (10,'Work',0);
Insert into LOCATION (USER_ID,NAME,FAVOURITE) values (11,'River',0);
Insert into LOCATION (USER_ID,NAME,FAVOURITE) values (11,'Rock',0);
Insert into LOCATION (USER_ID,NAME,FAVOURITE) values (11,'Casino',0);


Insert into GAME (GS_ID,USER_ID,START_DATE,END_DATE,AMOUNT_IN,AMOUNT_OUT,LOCATION_NAME) values (10,10,to_date('24-NOV-13','DD-MON-RR'),to_date('24-NOV-13','DD-MON-RR'),10,100,'Home');
Insert into GAME (GS_ID,USER_ID,START_DATE,END_DATE,AMOUNT_IN,AMOUNT_OUT,LOCATION_NAME) values (11,10,to_date('24-NOV-13','DD-MON-RR'),to_date('24-NOV-13','DD-MON-RR'),100,100,null);
Insert into GAME (GS_ID,USER_ID,START_DATE,END_DATE,AMOUNT_IN,AMOUNT_OUT,LOCATION_NAME) values (12,10,to_date('24-NOV-13','DD-MON-RR'),to_date('24-NOV-13','DD-MON-RR'),1,1000,'Home');
Insert into GAME (GS_ID,USER_ID,START_DATE,END_DATE,AMOUNT_IN,AMOUNT_OUT,LOCATION_NAME) values (20,10,to_date('21-NOV-13','DD-MON-RR'),to_date('24-NOV-13','DD-MON-RR'),1,0,'Home');
Insert into GAME (GS_ID,USER_ID,START_DATE,END_DATE,AMOUNT_IN,AMOUNT_OUT,LOCATION_NAME) values (13,10,to_date('24-NOV-13','DD-MON-RR'),to_date('24-NOV-13','DD-MON-RR'),100,1100,'Work');
Insert into GAME (GS_ID,USER_ID,START_DATE,END_DATE,AMOUNT_IN,AMOUNT_OUT,LOCATION_NAME) values (14,10,to_date('24-NOV-13','DD-MON-RR'),to_date('24-NOV-13','DD-MON-RR'),1,12,'Work');
Insert into GAME (GS_ID,USER_ID,START_DATE,END_DATE,AMOUNT_IN,AMOUNT_OUT,LOCATION_NAME) values (15,10,to_date('23-NOV-13','DD-MON-RR'),to_date('24-NOV-13','DD-MON-RR'),100,2200,'Home');
Insert into GAME (GS_ID,USER_ID,START_DATE,END_DATE,AMOUNT_IN,AMOUNT_OUT,LOCATION_NAME) values (19,10,to_date('22-NOV-13','DD-MON-RR'),to_date('22-NOV-13','DD-MON-RR'),4,3,'Home');
Insert into GAME (GS_ID,USER_ID,START_DATE,END_DATE,AMOUNT_IN,AMOUNT_OUT,LOCATION_NAME) values (18,10,to_date('23-NOV-13','DD-MON-RR'),to_date('24-NOV-13','DD-MON-RR'),1260,0,'Home');
Insert into GAME (GS_ID,USER_ID,START_DATE,END_DATE,AMOUNT_IN,AMOUNT_OUT,LOCATION_NAME) values (21,11,to_date('24-NOV-13','DD-MON-RR'),to_date('24-NOV-13','DD-MON-RR'),1,1,null);
Insert into GAME (GS_ID,USER_ID,START_DATE,END_DATE,AMOUNT_IN,AMOUNT_OUT,LOCATION_NAME) values (22,11,to_date('24-NOV-13','DD-MON-RR'),to_date('24-NOV-13','DD-MON-RR'),0,1,'River');
Insert into GAME (GS_ID,USER_ID,START_DATE,END_DATE,AMOUNT_IN,AMOUNT_OUT,LOCATION_NAME) values (23,11,to_date('24-NOV-13','DD-MON-RR'),to_date('24-NOV-13','DD-MON-RR'),0,0,'Rock');
Insert into GAME (GS_ID,USER_ID,START_DATE,END_DATE,AMOUNT_IN,AMOUNT_OUT,LOCATION_NAME) values (24,11,to_date('24-NOV-13','DD-MON-RR'),to_date('24-NOV-13','DD-MON-RR'),0,0,'Casino');


Insert into BACKING (BA_ID,GS_ID) values (10,12);
Insert into BACKING (BA_ID,GS_ID) values (11,13);
Insert into BACKING (BA_ID,GS_ID) values (11,14);
Insert into BACKING (BA_ID,GS_ID) values (11,15);
Insert into BACKING (BA_ID,GS_ID) values (15,21);


Insert into GAME_CASH (GS_ID,BIG_BLIND,SMALL_BLIND) values (10,0,0);
Insert into GAME_CASH (GS_ID,BIG_BLIND,SMALL_BLIND) values (11,0,0);
Insert into GAME_CASH (GS_ID,BIG_BLIND,SMALL_BLIND) values (12,0,0);
Insert into GAME_CASH (GS_ID,BIG_BLIND,SMALL_BLIND) values (20,0,0);
Insert into GAME_CASH (GS_ID,BIG_BLIND,SMALL_BLIND) values (13,0,0);
Insert into GAME_CASH (GS_ID,BIG_BLIND,SMALL_BLIND) values (14,0,0);
Insert into GAME_CASH (GS_ID,BIG_BLIND,SMALL_BLIND) values (15,0,0);
Insert into GAME_CASH (GS_ID,BIG_BLIND,SMALL_BLIND) values (19,2,0);
Insert into GAME_CASH (GS_ID,BIG_BLIND,SMALL_BLIND) values (18,0,0);
Insert into GAME_CASH (GS_ID,BIG_BLIND,SMALL_BLIND) values (21,0,0);
Insert into GAME_CASH (GS_ID,BIG_BLIND,SMALL_BLIND) values (22,0,0);
Insert into GAME_CASH (GS_ID,BIG_BLIND,SMALL_BLIND) values (23,0,0);
Insert into GAME_CASH (GS_ID,BIG_BLIND,SMALL_BLIND) values (24,0,0);


Insert into PAYMENT (PP_ID,PAYER_ID,PAYEE_ID,PAYMENT_DATE,AMOUNT) values (10,10,11,to_date('24-NOV-13','DD-MON-RR'),100);
Insert into PAYMENT (PP_ID,PAYER_ID,PAYEE_ID,PAYMENT_DATE,AMOUNT) values (11,10,12,to_date('24-NOV-13','DD-MON-RR'),312);
Insert into PAYMENT (PP_ID,PAYER_ID,PAYEE_ID,PAYMENT_DATE,AMOUNT) values (12,10,14,to_date('24-NOV-13','DD-MON-RR'),1000);
Insert into PAYMENT (PP_ID,PAYER_ID,PAYEE_ID,PAYMENT_DATE,AMOUNT) values (13,10,14,to_date('24-NOV-13','DD-MON-RR'),1);
Insert into PAYMENT (PP_ID,PAYER_ID,PAYEE_ID,PAYMENT_DATE,AMOUNT) values (14,10,15,to_date('24-NOV-13','DD-MON-RR'),3);

